<AML>
 <Item type="Method" id="280B3F3A43C047889C769B03C8EB67D5" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[top.hidePartTabsByBusinessLogic = function () {
	// If the tabbar is not yet ready, wait a bit and call the function recursively 
    if (!parent.relationships || !parent.relationships.relTabbarReady || parent.relationships.relTabbar.GetTabOrder("|") === "") {
        setTimeout("top.hidePartTabsByBusinessLogic()", 30);
        return;
    }

    //additional logic to make sure the gridApplet is loaded
    var selTabId = parent.relationships.relTabbar.GetSelectedTab();
    var grid = parent.relationships.iframesCollection[selTabId].contentWindow.gridApplet;
    if (!grid) {
        setTimeout("top.hidePartTabsByBusinessLogic();", 30);
        return;s
    }
    //find the tab and hide it
    setTimeout(function() {
		var tabbar = top.window.relationships.relTabbar ;
        // this method launched by an Action on ConfigurationElement so we know its the right tab
        // get selected Items
        var selected_ids=grid.getSelectedItemIds();
        if (selected_ids.length <1)
        {
            top.aras.AlertError("Please select element(s) to add to Package");
            return;
        }
        
        var it_name="";
        var strArrOfTypes = new Array();
        function contains(a, obj) {
            // function to test member of array, adapted from http://stackoverflow.com/questions/237104/array-containsobj-in-javascript
            // "decreasing while loop is the fastest way to iterate in JavaScript"
            var l = a.length;
            while (l--) {
               if (a[l] === obj) {
                   return true;
               }
            }
            return false;
        }
        for (var i=0;i<selected_ids.length;i++)
        {
            // get a distinct list of types selected
            var this_type=grid.cells(selected_ids[i],grid.getColumnIndex("package_group_D")).getValue(); //add _D to column_name!
            if (!contains(strArrOfTypes,this_type))
            {
                strArrOfTypes.push(this_type);
            }
        }
        for (var j=0;j<strArrOfTypes.length;j++)
        {
            // iterate accross types
            var strArrOfIds = new Array();
            for (var k=0;k<selected_ids.length;k++)
            {
                // iterate across selected items again
                var this_element_type=grid.cells(selected_ids[k],grid.getColumnIndex("package_group_D")).getValue();
                if (this_element_type===strArrOfTypes[j])
                {
                    // push element_id to create array of ids for same type
                    var this_element_id=grid.cells(selected_ids[k],grid.getColumnIndex("element_id_D")).getValue();//add _D to column_name
                    strArrOfIds.push(this_element_id);
                }
            }
            // add items of same type to sel
            var res = top.aras.addItemToPackageDef(strArrOfIds,strArrOfTypes[j]);
        }

    }, 500); // To allow correct execution of inner dojo event

};
setTimeout("top.hidePartTabsByBusinessLogic()", 30);
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>cm_add_to_package_definition</name>
 </Item>
</AML>